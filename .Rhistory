if (!is.na(S16)){results[[s]]["S16"] <- S16}
results[[s]][c("E1", "E2", "E3", "E4", "E5")[!unlist(lapply(E, is.na))]] <- 0
results[[s]]["I"] <- 1 - results[[s]][c("E1", "E2", "E3", "E4", "E5")[(M/2)-8]]
results[[s]] <- results[[s]][rowsResults]
models[[s]] <- model
}
} else {
results[[s]] <- NA[rowsResults]
models[[s]] <- NA
}
R2Thr <- 0.95
if (!is.null(model) & !any(is.na(model))){
R2 <- c(1 - (sum((resp - predict(model))^2)/sum((resp - mean(predict(model)))^2)))
results[[s]] <- c(coef(model), P = as.numeric(P[s]), R2 = R2)
if (R2 < R2Thr){
results[[s]] <- NA[rowsResults]
models[[s]] <- NA
} else {
if (!is.na(D1)){results[[s]]["D1"] <- D1[s]}
if (!is.na(D2)){results[[s]]["D2"] <- D2[s]}
if (!is.na(P)){results[[s]]["P"] <- P[s]}
results[[s]]["D0"] <- 1 - results[[s]]["D1"] - results[[s]]["D2"]
if (!is.na(S16)){results[[s]]["S16"] <- S16}
results[[s]][c("E1", "E2", "E3", "E4", "E5")[!unlist(lapply(E, is.na))]] <- 0
results[[s]]["I"] <- 1 - results[[s]][c("E1", "E2", "E3", "E4", "E5")[(M/2)-8]]
results[[s]] <- results[[s]][rowsResults]
models[[s]] <- model
}
} else {
results[[s]] <- NA[rowsResults]
models[[s]] <- NA
}
R2
# Run FASA
results <- list()
models <- list()
rowsResults <- c("D0", "D1", "D2", "P", "S16", "E1", "E2", "E3", "E4", "E5", "I", "R2")
results <- data.frame(do.call(rbind, results))
colnames(results) <- rowsResults
rownames(results) <-  names(models) <- colnames(fa)[3:ncol(fa)]
results
results
results
if (!is.null(model) & !any(is.na(model))){
R2 <- c(1 - (sum((resp - predict(model))^2)/sum((resp - mean(predict(model)))^2)))
results[[s]] <- c(coef(model), P = as.numeric(P[s]), R2 = R2)
if (R2 < R2Thr){
results[[s]] <- NA[rowsResults]
models[[s]] <- NA
} else {
if (!is.na(D1)){results[[s]]["D1"] <- D1[s]}
if (!is.na(D2)){results[[s]]["D2"] <- D2[s]}
if (!is.na(P)){results[[s]]["P"] <- P[s]}
results[[s]]["D0"] <- 1 - results[[s]]["D1"] - results[[s]]["D2"]
if (!is.na(S16)){results[[s]]["S16"] <- S16}
results[[s]][c("E1", "E2", "E3", "E4", "E5")[!unlist(lapply(E, is.na))]] <- 0
results[[s]]["I"] <- 1 - results[[s]][c("E1", "E2", "E3", "E4", "E5")[(M/2)-8]]
results[[s]] <- results[[s]][rowsResults]
models[[s]] <- model
}
} else {
results[[s]] <- NA[rowsResults]
models[[s]] <- NA
}
if (!is.null(model) & !any(is.na(model))){
R2 <- c(1 - (sum((resp - predict(model))^2)/sum((resp - mean(predict(model)))^2)))
results[[s]] <- c(coef(model), P = as.numeric(P[s]), R2 = R2)
if (R2 < R2Thr){
results[[s]] <- NA[rowsResults]
models[[s]] <- NA
} else {
if (!is.na(D1)){results[[s]]["D1"] <- D1[s]}
if (!is.na(D2)){results[[s]]["D2"] <- D2[s]}
if (!is.na(P)){results[[s]]["P"] <- P[s]}
results[[s]]["D0"] <- 1 - results[[s]]["D1"] - results[[s]]["D2"]
if (!is.na(SE[[1]])){results[[s]]["S16"] <- SE[[1]]}
results[[s]][c("E1", "E2", "E3", "E4", "E5")[!unlist(lapply(E, is.na))]] <- 0
results[[s]]["I"] <- 1 - results[[s]][c("E1", "E2", "E3", "E4", "E5")[(M/2)-8]]
results[[s]] <- results[[s]][rowsResults]
models[[s]] <- model
}
} else {
results[[s]] <- NA[rowsResults]
models[[s]] <- NA
}
R2 <- c(1 - (sum((resp - predict(model))^2)/sum((resp - mean(predict(model)))^2)))
results[[s]] <- c(coef(model), P = as.numeric(P[s]), R2 = R2)
R2 < R2Thr
R2 <- c(1 - (sum((resp - predict(model))^2)/sum((resp - mean(predict(model)))^2)))
results[[s]] <- c(coef(model), P = as.numeric(P[s]), R2 = R2)
coef(model)
c(coef(model), P = as.numeric(P[s]), R2 = R2)
R2 < R2Thr
if (!is.na(D1)){results[[s]]["D1"] <- D1[s]}
!is.na(D1)
s<-1
if (!is.null(model) & !any(is.na(model))){
R2 <- c(1 - (sum((resp - predict(model))^2)/sum((resp - mean(predict(model)))^2)))
results[[s]] <- c(coef(model), P = as.numeric(P[s]), R2 = R2)
if (R2 < R2Thr){
results[[s]] <- NA[rowsResults]
models[[s]] <- NA
} else {
if (!is.na(D1)){results[[s]]["D1"] <- D1[s]}
if (!is.na(D2)){results[[s]]["D2"] <- D2[s]}
if (!is.na(P)){results[[s]]["P"] <- P[s]}
results[[s]]["D0"] <- 1 - results[[s]]["D1"] - results[[s]]["D2"]
if (!is.na(SE[[1]])){results[[s]]["S16"] <- SE[[1]]}
results[[s]][c("E1", "E2", "E3", "E4", "E5")[!unlist(lapply(E, is.na))]] <- 0
results[[s]]["I"] <- 1 - results[[s]][c("E1", "E2", "E3", "E4", "E5")[(M/2)-8]]
results[[s]] <- results[[s]][rowsResults]
models[[s]] <- model
}
} else {
results[[s]] <- NA[rowsResults]
models[[s]] <- NA
}
# Run FASA
results <- list()
models <- list()
rowsResults <- c("D0", "D1", "D2", "P", "S16", "E1", "E2", "E3", "E4", "E5", "I", "R2")
if (!is.null(model) & !any(is.na(model))){
R2 <- c(1 - (sum((resp - predict(model))^2)/sum((resp - mean(predict(model)))^2)))
results[[s]] <- c(coef(model), P = as.numeric(P[s]), R2 = R2)
if (R2 < R2Thr){
results[[s]] <- NA[rowsResults]
models[[s]] <- NA
} else {
if (!is.na(D1)){results[[s]]["D1"] <- D1[s]}
if (!is.na(D2)){results[[s]]["D2"] <- D2[s]}
if (!is.na(P)){results[[s]]["P"] <- P[s]}
results[[s]]["D0"] <- 1 - results[[s]]["D1"] - results[[s]]["D2"]
if (!is.na(SE[[1]])){results[[s]]["S16"] <- SE[[1]]}
results[[s]][c("E1", "E2", "E3", "E4", "E5")[!unlist(lapply(E, is.na))]] <- 0
results[[s]]["I"] <- 1 - results[[s]][c("E1", "E2", "E3", "E4", "E5")[(M/2)-8]]
results[[s]] <- results[[s]][rowsResults]
models[[s]] <- model
}
} else {
results[[s]] <- NA[rowsResults]
models[[s]] <- NA
}
results
resp[2*n+1]
resp <- as.numeric(readClipboard())
resp
M <- 22
vcomb16 <- combAcetate(16)
mcombe <- combAcetate(2) # acetate combination for elongation steps
c <- "FA(22:1)n9"
M <- as.numeric(parameters[parameters$FattyAcid == c, "M"])
S16 <- as.numeric(parameters[parameters$FattyAcid == c, "S16"])
E1 <- as.numeric(parameters[parameters$FattyAcid == c, "E1"])
E2 <- as.numeric(parameters[parameters$FattyAcid == c, "E2"])
E3 <- as.numeric(parameters[parameters$FattyAcid == c, "E3"])
E4 <- as.numeric(parameters[parameters$FattyAcid == c, "E4"])
E5 <- as.numeric(parameters[parameters$FattyAcid == c, "E5"])
if (S16 == 1){S16 <- NA}else{S16 <- 0}
if (E1 == 1){E1 <- NA}else{E1 <- 0}
if (E2 == 1){E2 <- NA}else{E2 <- 0}
if (E3 == 1){E3 <- NA}else{E3 <- 0}
if (E4 == 1){E4 <- NA}else{E4 <- 0}
if (E5 == 1){E5 <- NA}else{E5 <- 0}
SEini <- list(S16, E1, E2, E3, E4, E5)
SEini
formula <- as.formula(resp ~ elongationqmult(S16, D1, D2, P, E1, E2, E3, E4, E5,
M, vcomb16, mcombe))
# Run FASA
results <- list()
models <- list()
rowsResults <- c("D0", "D1", "D2", "P", "S16", "E1", "E2", "E3", "E4", "E5", "I", "R2")
# check parameters based on distribution
n <- (M-16)/2
# check parameters based on distribution
n <- (M-16)/2
n
SE <- checkparameters(resp, M, n, SEini)
SEini
c
S16
E1
E2
E3
E4
# check parameters based on distribution
n <- (M-16)/2
SEini <- list(S16, E1, E2, E3, E4, E5)
SEini
checkparameters(resp, M, n, SEini)
SE<-SEini
resp
M
n
sum(resp[seq(2*n+3, M+1, 2)] > 0.001)
resp[seq(2*n+3, M+1, 2)]
resp
2*n+3
M+1
seq(2*n+3, M+1, 2)
resp
resp <- as.numeric(readClipboard())
resp
checkparameters(resp, M, n, SEini)
SE <- checkparameters(resp, M, n, SEini)
gridStart <- gridElong(S16=SE[[1]], E1 = SE[[2]], E2=SE[[3]], E3=SE[[4]],
E4=SE[[5]], E5=SE[[6]], startpoints=startpoints)
datanls <- dataElong(S16=SE[[1]], D1=D1[s], D2=D2[s], P=P[s], E1 = SE[[2]],
E2=SE[[3]], E3=SE[[4]], E4=SE[[5]], E5=SE[[6]],
M=M, vcomb16=vcomb16, mcombe=mcombe)
datanls$resp <- resp
model <- tryCatch({estimatePars(formula, gridStart, datanls,
maxiter = maxiter, maxconvergence=maxconvergence)},
error = function(e){NULL})
model
if (!is.null(model) & !any(is.na(model))){
R2 <- c(1 - (sum((resp - predict(model))^2)/sum((resp - mean(predict(model)))^2)))
results[[s]] <- c(coef(model), P = as.numeric(P[s]), R2 = R2)
if (R2 < R2Thr){
results[[s]] <- NA[rowsResults]
models[[s]] <- NA
} else {
if (!is.na(D1)){results[[s]]["D1"] <- D1[s]}
if (!is.na(D2)){results[[s]]["D2"] <- D2[s]}
if (!is.na(P)){results[[s]]["P"] <- P[s]}
results[[s]]["D0"] <- 1 - results[[s]]["D1"] - results[[s]]["D2"]
if (!is.na(SE[[1]])){results[[s]]["S16"] <- SE[[1]]}
results[[s]][c("E1", "E2", "E3", "E4", "E5")[!unlist(lapply(E, is.na))]] <- 0
results[[s]]["I"] <- 1 - results[[s]][c("E1", "E2", "E3", "E4", "E5")[(M/2)-8]]
results[[s]] <- results[[s]][rowsResults]
models[[s]] <- model
}
} else {
results[[s]] <- NA[rowsResults]
models[[s]] <- NA
}
results
gridStart <- gridElong(S16=SE[[1]], E1 = SE[[2]], E2=SE[[3]], E3=SE[[4]],
E4=SE[[5]], E5=SE[[6]], startpoints=startpoints)
gridStart
n
resp
SE
gridStart <- gridElong(S16=SE[[1]], E1 = SE[[2]], E2=SE[[3]], E3=SE[[4]],
E4=SE[[5]], E5=SE[[6]], startpoints=startpoints)
datanls <- dataElong(S16=SE[[1]], D1=D1[s], D2=D2[s], P=P[s], E1 = SE[[2]],
E2=SE[[3]], E3=SE[[4]], E4=SE[[5]], E5=SE[[6]],
M=M, vcomb16=vcomb16, mcombe=mcombe)
datanls$resp <- resp
model <- tryCatch({estimatePars(formula, gridStart, datanls,
maxiter = maxiter, maxconvergence=maxconvergence)},
error = function(e){NULL})
model
# Run FASA
results <- list()
models <- list()
rowsResults <- c("D0", "D1", "D2", "P", "S16", "E1", "E2", "E3", "E4", "E5", "I", "R2")
R2 <- c(1 - (sum((resp - predict(model))^2)/sum((resp - mean(predict(model)))^2)))
R2
results[[s]] <- c(coef(model), P = as.numeric(P[s]), R2 = R2)
results[[s]]
if (!is.null(model) & !any(is.na(model))){
R2 <- c(1 - (sum((resp - predict(model))^2)/sum((resp - mean(predict(model)))^2)))
results[[s]] <- c(coef(model), P = as.numeric(P[s]), R2 = R2)
if (R2 < R2Thr){
results[[s]] <- NA[rowsResults]
models[[s]] <- NA
} else {
if (!is.na(D1)){results[[s]]["D1"] <- D1[s]}
if (!is.na(D2)){results[[s]]["D2"] <- D2[s]}
if (!is.na(P)){results[[s]]["P"] <- P[s]}
results[[s]]["D0"] <- 1 - results[[s]]["D1"] - results[[s]]["D2"]
if (!is.na(SE[[1]])){results[[s]]["S16"] <- SE[[1]]}
results[[s]][c("E1", "E2", "E3", "E4", "E5")[!unlist(lapply(E, is.na))]] <- 0
results[[s]]["I"] <- 1 - results[[s]][c("E1", "E2", "E3", "E4", "E5")[(M/2)-8]]
results[[s]] <- results[[s]][rowsResults]
models[[s]] <- model
}
} else {
results[[s]] <- NA[rowsResults]
models[[s]] <- NA
}
results
# Run FASA
results <- list()
models <- list()
rowsResults <- c("D0", "D1", "D2", "P", "S16", "E1", "E2", "E3", "E4", "E5", "I", "R2")
model
if (!is.null(model) & !any(is.na(model))){
R2 <- c(1 - (sum((resp - predict(model))^2)/sum((resp - mean(predict(model)))^2)))
results[[s]] <- c(coef(model), P = as.numeric(P[s]), R2 = R2)
if (R2 < R2Thr){
results[[s]] <- NA[rowsResults]
models[[s]] <- NA
} else {
if (!is.na(D1)){results[[s]]["D1"] <- D1[s]}
if (!is.na(D2)){results[[s]]["D2"] <- D2[s]}
if (!is.na(P)){results[[s]]["P"] <- P[s]}
results[[s]]["D0"] <- 1 - results[[s]]["D1"] - results[[s]]["D2"]
if (!is.na(SE[[1]])){results[[s]]["S16"] <- SE[[1]]}
results[[s]][c("E1", "E2", "E3", "E4", "E5")[!unlist(lapply(E, is.na))]] <- 0
results[[s]]["I"] <- 1 - results[[s]][c("E1", "E2", "E3", "E4", "E5")[(M/2)-8]]
results[[s]] <- results[[s]][rowsResults]
models[[s]] <- model
}
} else {
results[[s]] <- NA[rowsResults]
models[[s]] <- NA
}
results
s
SE[[1]]
R2 <- c(1 - (sum((resp - predict(model))^2)/sum((resp - mean(predict(model)))^2)))
results[[s]] <- c(coef(model), P = as.numeric(P[s]), R2 = R2)
if (!is.na(D1)){results[[s]]["D1"] <- D1[s]}
if (!is.na(D2)){results[[s]]["D2"] <- D2[s]}
if (!is.na(P)){results[[s]]["P"] <- P[s]}
results[[s]]["D0"] <- 1 - results[[s]]["D1"] - results[[s]]["D2"]
if (!is.na(SE[[1]])){results[[s]]["S16"] <- SE[[1]]}
results[[s]][c("E1", "E2", "E3", "E4", "E5")[!unlist(lapply(E, is.na))]] <- 0
results[[s]]["I"] <- 1 - results[[s]][c("E1", "E2", "E3", "E4", "E5")[(M/2)-8]]
results[[s]] <- results[[s]][rowsResults]
models[[s]] <- model
results[[s]]
predict(model)
model
results[[s]] <- c(coef(model), P = as.numeric(P[s]), R2 = R2)
results
if (!is.na(D1)){results[[s]]["D1"] <- D1[s]}
if (!is.na(D2)){results[[s]]["D2"] <- D2[s]}
if (!is.na(P)){results[[s]]["P"] <- P[s]}
results[[s]]["D0"] <- 1 - results[[s]]["D1"] - results[[s]]["D2"]
results
if (!is.na(SE[[1]])){results[[s]]["S16"] <- SE[[1]]}
results[[s]][c("E1", "E2", "E3", "E4", "E5")[!unlist(lapply(E, is.na))]] <- 0
results[[s]]["I"] <- 1 - results[[s]][c("E1", "E2", "E3", "E4", "E5")[(M/2)-8]]
results[[s]] <- results[[s]][rowsResults]
models[[s]] <- model
results <- data.frame(do.call(rbind, results))
results
results
R2 <- c(1 - (sum((resp - predict(model))^2)/sum((resp - mean(predict(model)))^2)))
results[[s]] <- c(coef(model), P = as.numeric(P[s]), R2 = R2)
results
# Run FASA
results <- list()
models <- list()
R2 <- c(1 - (sum((resp - predict(model))^2)/sum((resp - mean(predict(model)))^2)))
results[[s]] <- c(coef(model), P = as.numeric(P[s]), R2 = R2)
results[[s]]
if (!is.na(D1)){results[[s]]["D1"] <- D1[s]}
if (!is.na(D2)){results[[s]]["D2"] <- D2[s]}
if (!is.na(P)){results[[s]]["P"] <- P[s]}
results[[s]]["D0"] <- 1 - results[[s]]["D1"] - results[[s]]["D2"]
results[[s]]
if (!is.na(SE[[1]])){results[[s]]["S16"] <- SE[[1]]}
results[[s]][c("E1", "E2", "E3", "E4", "E5")[!unlist(lapply(E, is.na))]] <- 0
results[[s]]
results[[s]][c("E1", "E2", "E3", "E4", "E5")[!unlist(lapply(SE[2:6], is.na))]] <- 0
results[[s]]
R2 <- c(1 - (sum((resp - predict(model))^2)/sum((resp - mean(predict(model)))^2)))
results[[s]] <- c(coef(model), P = as.numeric(P[s]), R2 = R2)
if (!is.na(D1)){results[[s]]["D1"] <- D1[s]}
if (!is.na(D2)){results[[s]]["D2"] <- D2[s]}
if (!is.na(P)){results[[s]]["P"] <- P[s]}
results[[s]]["D0"] <- 1 - results[[s]]["D1"] - results[[s]]["D2"]
if (!is.na(SE[[1]])){results[[s]]["S16"] <- SE[[1]]}
results[[s]][c("E1", "E2", "E3", "E4", "E5")[!unlist(lapply(SE[2:6], is.na))]] <- 0
results[[s]]
results[[s]]["I"] <- 1 - results[[s]][c("E1", "E2", "E3", "E4", "E5")[(M/2)-8]]
results[[s]] <- results[[s]][rowsResults]
models[[s]] <- model
results <- data.frame(do.call(rbind, results))
r
results
devtools::load_all(".")
library(FAMetA)
SE[[2]]==0 & n > 1
SE[[2]]==0
SE[[2]]
SE
!is.na(SE[[2]]) & n > 1
!is.na(SE[[2]])
is.na(SE[[2]])
n > 1
!is.na(SE[[2]]) & n > 1
n > 1
resp[2*n+1] > 0.001
n
n > 1
!is.na(SE[[2]]) & n > 1
is.na(SE[[2]])
SE[[2]]
is.na(SE[[2]]) & n > 1
resp[2*(n-1)+1] > 0.001
!is.na(SE[[2]])
is.na(SE[[2]])
is.na(SE[[2]]) & resp[2*(n-1)+1] > 0.001
!is.na(SE[[2]])
1e-4
as.numeric(1e-4)
as.numeric(1e-4)/1
format(1e-4)
format(1e-4, digits=5)
format(1e-4, scientific = FALSE)
library(FAMetA)
library(FAMetA)
library(FAMetA)
length(resp[seq(2*n+3, M+1, 2)]))
length(resp[seq(2*n+3, M+1, 2)])
library(FAMetA)
n<-1
M<-18
resp <- rep(0,19)
round(0.33*length(resp[seq(2*n+3, M+1, 2)]))
floor(0.33*length(resp[seq(2*n+3, M+1, 2)]))
(sum(resp[seq(2*n+3, M+1, 2)] > 0.001) >= 3 |
sum(resp[seq(2*n+3, M+1, 2)] > 0.01) >= 2)
sum(resp[seq(2*n+3, M+1, 2)] > 0.001)
M
resp <- rep(1, 19)
resp <- resp/sum(resp)
sum(resp[seq(2*n+3, M+1, 2)] > 0.001) >= 3
resp <- as.numeric(readClipboard())
sum(resp[seq(2*n+3, M+1, 2)] > 0.001)
sum(resp[seq(2*n+3, M+1, 2)] > 0.001) >= 3
(sum(resp[seq(2*n+3, M+1, 2)] > 0.001) >= 3 |
sum(resp[seq(2*n+3, M+1, 2)] > 0.01) >= 2)
library(FAMetA)
fattyacidsdb
createLipidDB("FA", c("16:3"))
fattyacidsdb <- rbind(fattyacidsdb, data.frame(formula = "C16H26O2", total = "16:3", Mass=250.1933))
fattyacidsdb <- fattyacidsdb[order(fattyacidsdb$Mass, decreasing = FALSE),]
fattyacidsdb
rm(fattyacidsdb)
fattyacidsdb
fattyacidsdb$total
createLipidDB("FA", chains=c("10:0", "12:0", "14:0", "14:1", "16:0", "16:1",
"16:2", "16:3", "18:0", "18:1", "18:2", "18:3",
"18:4", "20:0", "20:1", "20:2", "20:3", "20:4",
"20:5", "20:6", "22:0", "22:1", "22:2", "22:3",
"22:4", "22:5", "22:6", "24:0", "24:1", "24:2",
"24:3", "24:4", "24:5", "24:6", "26:0"))[[1]]
usethis::use_data(fattyacidsdb, overwrite = TRUE)
library(FAMetA)
parameters
library(FAMetA)
library(FAMetA)
library(FAMetA)
names(fadata)
library(FAMetA)
library(FAMetA)
mean(1)
sd(2)
sd(2,2,2)
sd(c(2,2,2))
sd(c(2))
sd(c(2, 2))
library(FAMetA)
library(FAMetA)
library(FAMetA)
library(FAMetA)
load("H:/Maribel/Paquetes/web/FAMetA/3bc0ba70-0348-410a-92d6-9e76478567a9/fadata.rda")
load("H:/Maribel/Paquetes/web/FAMetA/4958b14e-47f1-4956-b8c2-25ac62b32375/fadata.rda")
library(FAMetA)
fadata$metadata
fadata <- summarizeResults(fadata, controlgroup = "Control13Cglc")
devtools::load_all(".")
fadata <- readfadatafile("H:/Maribel/metabolomica/20220113_FA_linfos/Maven/subset/FAs_subset.csv")
fadata <- readfadatafile("H:/Maribel/metabolomica/20220113_FA_linfos/Maven/subset/FAs_subset.csv")
fadata <- readfadatafile("H:/Maribel/metabolomica/20220113_FA_linfos/Maven/subset/FAs_subset.csv", sep=";")
fadata$metadata
blankgroup="Blank"
if (sum(toupper(fadata$metadata$sampletype) == toupper(blankgroup)) == 1){
blank <- fadata$intensities[,fadata$metadata$sampletype == blankgroup, drop = FALSE]
} else {
blank <- apply(fadata$intensities[,toupper(fadata$metadata$sampletype) == toupper(blankgroup)],
1, mean, na.rm = T)
}
blank
fadata$intensities <- fadata$intensities - blank
sum(toupper(fadata$metadata$sampletype) == toupper(blankgroup))
sum(toupper(fadata$metadata$sampletype) == toupper(blankgroup)) == 1
blank <- fadata$intensities[,fadata$metadata$sampletype == blankgroup, drop = FALSE]
blank
dim(blank)
dim(fadata$intensities)
blank <- apply(fadata$intensities[,toupper(fadata$metadata$sampletype) == toupper(blankgroup)],
1, mean, na.rm = T)
blank <- fadata$intensities[,fadata$metadata$sampletype == blankgroup, drop = FALSE]
blank
blank <- apply(fadata$intensities[,toupper(fadata$metadata$sampletype) == toupper(blankgroup), drop=FALSE],
1, mean, na.rm = T)
blank
fadata$intensities <- fadata$intensities - blank
fadata$intensities
blank <- apply(fadata$intensities[,toupper(fadata$metadata$sampletype) == toupper(blankgroup), drop=FALSE],
1, mean, na.rm = T)
blank
fadata$intensities <- fadata$intensities - blank
fadata$intensities[fadata$intensities < 0] <- 0
fadata$intensities <- fadata$intensities[,toupper(fadata$metadata$sampletype) != toupper(blankgroup),
drop = FALSE]
fadata <- readfadatafile("H:/Maribel/metabolomica/20220113_FA_linfos/Maven/subset/FAs_subset.csv", sep=";")
blank <- apply(fadata$intensities[,toupper(fadata$metadata$sampletype) == toupper(blankgroup), drop=FALSE],
1, mean, na.rm = T)
blank
fadata$intensities <- fadata$intensities - blank
fadata$intensities
blank <- apply(fadata$intensities[,toupper(fadata$metadata$sampletype) == toupper(blankgroup), drop=FALSE],
1, mean, na.rm = T)
fadata$intensities <- fadata$intensities - blank
getwd()
